/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/sensors/leptrino/msg/ForceTorque.msg */
#ifndef LEPTRINO_MESSAGE_FORCETORQUE_H
#define LEPTRINO_MESSAGE_FORCETORQUE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace leptrino
{
template <class ContainerAllocator>
struct ForceTorque_ {
  typedef ForceTorque_<ContainerAllocator> Type;

  ForceTorque_()
  : header()
  , fx(0.0)
  , fy(0.0)
  , fz(0.0)
  , mx(0.0)
  , my(0.0)
  , mz(0.0)
  {
  }

  ForceTorque_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , fx(0.0)
  , fy(0.0)
  , fz(0.0)
  , mx(0.0)
  , my(0.0)
  , mz(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _fx_type;
  double fx;

  typedef double _fy_type;
  double fy;

  typedef double _fz_type;
  double fz;

  typedef double _mx_type;
  double mx;

  typedef double _my_type;
  double my;

  typedef double _mz_type;
  double mz;


  typedef boost::shared_ptr< ::leptrino::ForceTorque_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leptrino::ForceTorque_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ForceTorque
typedef  ::leptrino::ForceTorque_<std::allocator<void> > ForceTorque;

typedef boost::shared_ptr< ::leptrino::ForceTorque> ForceTorquePtr;
typedef boost::shared_ptr< ::leptrino::ForceTorque const> ForceTorqueConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::leptrino::ForceTorque_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::leptrino::ForceTorque_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace leptrino

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::leptrino::ForceTorque_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::leptrino::ForceTorque_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::leptrino::ForceTorque_<ContainerAllocator> > {
  static const char* value() 
  {
    return "040118d1701454c821dbf74fcc7c6909";
  }

  static const char* value(const  ::leptrino::ForceTorque_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x040118d1701454c8ULL;
  static const uint64_t static_value2 = 0x21dbf74fcc7c6909ULL;
};

template<class ContainerAllocator>
struct DataType< ::leptrino::ForceTorque_<ContainerAllocator> > {
  static const char* value() 
  {
    return "leptrino/ForceTorque";
  }

  static const char* value(const  ::leptrino::ForceTorque_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::leptrino::ForceTorque_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
#force x, f, z N\n\
float64 fx\n\
float64 fy\n\
float64 fz\n\
\n\
#torque x, f, z Nm\n\
float64 mx\n\
float64 my\n\
float64 mz\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::leptrino::ForceTorque_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::leptrino::ForceTorque_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::leptrino::ForceTorque_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::leptrino::ForceTorque_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.fx);
    stream.next(m.fy);
    stream.next(m.fz);
    stream.next(m.mx);
    stream.next(m.my);
    stream.next(m.mz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ForceTorque_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leptrino::ForceTorque_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::leptrino::ForceTorque_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fx: ";
    Printer<double>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<double>::stream(s, indent + "  ", v.fy);
    s << indent << "fz: ";
    Printer<double>::stream(s, indent + "  ", v.fz);
    s << indent << "mx: ";
    Printer<double>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<double>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<double>::stream(s, indent + "  ", v.mz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LEPTRINO_MESSAGE_FORCETORQUE_H

