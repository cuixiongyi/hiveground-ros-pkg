"""autogenerated by genpy from hg_hand_interaction/HandGesture.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HandGesture(genpy.Message):
  _md5sum = "f7a9c9808b5b46db4b902e33263980db"
  _type = "hg_hand_interaction/HandGesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 type
float64 var1

#request constants
int8 NOT_DETECTED = 0
int8 SWEEP_UP_ONE_HAND = 1
int8 SWEEP_DOWN_ONE_HAND = 2
int8 SWEEP_LEFT_ONE_HAND = 3
int8 SWEEP_RIGHT_ONE_HAND = 4
int8 SWEEP_FORWARD_ONE_HAND = 5
int8 SWEEP_BACKWARD_ONE_HAND = 6

int8 SWEEP_UP_TWO_HAND = 7
int8 SWEEP_DOWN_TWO_HAND = 8
int8 SWEEP_LEFT_TWO_HAND = 9
int8 SWEEP_RIGHT_TWO_HAND = 10
int8 SWEEP_FORWARD_TWO_HAND = 11
int8 SWEEP_BACKWARD_TWO_HAND = 12
int8 SWEEP_OPEN_TWO_HAND = 13
int8 SWEEP_CLOSE_TWO_HAND = 14

int8 PUSH_PULL_XP = 15
int8 PUSH_PULL_XN = 16 
int8 PUSH_PULL_YP = 17
int8 PUSH_PULL_YN = 18
int8 PUSH_PULL_ZP = 19
int8 PUSH_PULL_ZN = 20
"""
  # Pseudo-constants
  NOT_DETECTED = 0
  SWEEP_UP_ONE_HAND = 1
  SWEEP_DOWN_ONE_HAND = 2
  SWEEP_LEFT_ONE_HAND = 3
  SWEEP_RIGHT_ONE_HAND = 4
  SWEEP_FORWARD_ONE_HAND = 5
  SWEEP_BACKWARD_ONE_HAND = 6
  SWEEP_UP_TWO_HAND = 7
  SWEEP_DOWN_TWO_HAND = 8
  SWEEP_LEFT_TWO_HAND = 9
  SWEEP_RIGHT_TWO_HAND = 10
  SWEEP_FORWARD_TWO_HAND = 11
  SWEEP_BACKWARD_TWO_HAND = 12
  SWEEP_OPEN_TWO_HAND = 13
  SWEEP_CLOSE_TWO_HAND = 14
  PUSH_PULL_XP = 15
  PUSH_PULL_XN = 16
  PUSH_PULL_YP = 17
  PUSH_PULL_YN = 18
  PUSH_PULL_ZP = 19
  PUSH_PULL_ZN = 20

  __slots__ = ['type','var1']
  _slot_types = ['int8','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,var1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandGesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.var1 is None:
        self.var1 = 0.
    else:
      self.type = 0
      self.var1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.type, _x.var1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.type, _x.var1,) = _struct_bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_bd.pack(_x.type, _x.var1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.type, _x.var1,) = _struct_bd.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bd = struct.Struct("<bd")
