/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/hiveground/hg_apps/hg_object_tracking/msg/Hands.msg */
#ifndef HG_OBJECT_TRACKING_MESSAGE_HANDS_H
#define HG_OBJECT_TRACKING_MESSAGE_HANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "hg_object_tracking/Hand.h"

namespace hg_object_tracking
{
template <class ContainerAllocator>
struct Hands_ {
  typedef Hands_<ContainerAllocator> Type;

  Hands_()
  : header()
  , hands()
  {
  }

  Hands_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , hands(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::hg_object_tracking::Hand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hg_object_tracking::Hand_<ContainerAllocator> >::other >  _hands_type;
  std::vector< ::hg_object_tracking::Hand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hg_object_tracking::Hand_<ContainerAllocator> >::other >  hands;


  typedef boost::shared_ptr< ::hg_object_tracking::Hands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_object_tracking::Hands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Hands
typedef  ::hg_object_tracking::Hands_<std::allocator<void> > Hands;

typedef boost::shared_ptr< ::hg_object_tracking::Hands> HandsPtr;
typedef boost::shared_ptr< ::hg_object_tracking::Hands const> HandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hg_object_tracking::Hands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hg_object_tracking::Hands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hg_object_tracking

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_object_tracking::Hands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_object_tracking::Hands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_object_tracking::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b78f3ee919c8b10900946d2e5fe0a669";
  }

  static const char* value(const  ::hg_object_tracking::Hands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb78f3ee919c8b109ULL;
  static const uint64_t static_value2 = 0x00946d2e5fe0a669ULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_object_tracking::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_object_tracking/Hands";
  }

  static const char* value(const  ::hg_object_tracking::Hands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_object_tracking::Hands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
#if two hands are detected, if handedness is distinguished, left hand is first\n\
Hand[] hands\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: hg_object_tracking/Hand\n\
geometry_msgs/Vector3 arm_centroid\n\
geometry_msgs/Vector3 arm_eigen_value\n\
geometry_msgs/Vector3[] arm_eigen_vectors\n\
\n\
geometry_msgs/Vector3 hand_centroid\n\
geometry_msgs/Vector3 hand_eigen_value\n\
geometry_msgs/Vector3[] hand_eigen_vectors\n\
geometry_msgs/Point[] fingers\n\
\n\
#Possibilities for state variable:\n\
# open - open palm, usually five fingers\n\
# grip - fingers curled forward\n\
# paddle -  fingers together and straight\n\
# fist   \n\
string state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::hg_object_tracking::Hands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hg_object_tracking::Hands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hg_object_tracking::Hands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_object_tracking::Hands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.hands);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Hands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hg_object_tracking::Hands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hg_object_tracking::Hands_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hands[]" << std::endl;
    for (size_t i = 0; i < v.hands.size(); ++i)
    {
      s << indent << "  hands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hg_object_tracking::Hand_<ContainerAllocator> >::stream(s, indent + "    ", v.hands[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HG_OBJECT_TRACKING_MESSAGE_HANDS_H

