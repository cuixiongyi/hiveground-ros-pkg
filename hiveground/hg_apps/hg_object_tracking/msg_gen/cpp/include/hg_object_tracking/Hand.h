/* Auto-generated by genmsg_cpp for file /home/chang/ros_workspace/hiveground-ros-pkg/hiveground/hg_apps/hg_object_tracking/msg/Hand.msg */
#ifndef HG_OBJECT_TRACKING_MESSAGE_HAND_H
#define HG_OBJECT_TRACKING_MESSAGE_HAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Transform.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Transform.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Point.h"

namespace hg_object_tracking
{
template <class ContainerAllocator>
struct Hand_ {
  typedef Hand_<ContainerAllocator> Type;

  Hand_()
  : arm_centroid()
  , arm_eigen_value()
  , arm_eigen_vectors()
  , hand_centroid()
  , hand_eigen_value()
  , hand_eigen_vectors()
  , fingers()
  , state()
  {
  }

  Hand_(const ContainerAllocator& _alloc)
  : arm_centroid(_alloc)
  , arm_eigen_value(_alloc)
  , arm_eigen_vectors(_alloc)
  , hand_centroid(_alloc)
  , hand_eigen_value(_alloc)
  , hand_eigen_vectors(_alloc)
  , fingers(_alloc)
  , state(_alloc)
  {
  }

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _arm_centroid_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  arm_centroid;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _arm_eigen_value_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  arm_eigen_value;

  typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _arm_eigen_vectors_type;
  std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  arm_eigen_vectors;

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _hand_centroid_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  hand_centroid;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _hand_eigen_value_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  hand_eigen_value;

  typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _hand_eigen_vectors_type;
  std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  hand_eigen_vectors;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _fingers_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  fingers;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;


  typedef boost::shared_ptr< ::hg_object_tracking::Hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_object_tracking::Hand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Hand
typedef  ::hg_object_tracking::Hand_<std::allocator<void> > Hand;

typedef boost::shared_ptr< ::hg_object_tracking::Hand> HandPtr;
typedef boost::shared_ptr< ::hg_object_tracking::Hand const> HandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hg_object_tracking::Hand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hg_object_tracking::Hand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hg_object_tracking

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_object_tracking::Hand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_object_tracking::Hand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_object_tracking::Hand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96d008446c62806065a06ae44bfb925d";
  }

  static const char* value(const  ::hg_object_tracking::Hand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96d008446c628060ULL;
  static const uint64_t static_value2 = 0x65a06ae44bfb925dULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_object_tracking::Hand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_object_tracking/Hand";
  }

  static const char* value(const  ::hg_object_tracking::Hand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_object_tracking::Hand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Transform arm_centroid\n\
geometry_msgs/Vector3 arm_eigen_value\n\
geometry_msgs/Vector3[] arm_eigen_vectors\n\
\n\
geometry_msgs/Transform hand_centroid\n\
geometry_msgs/Vector3 hand_eigen_value\n\
geometry_msgs/Vector3[] hand_eigen_vectors\n\
geometry_msgs/Point[] fingers\n\
\n\
#Possibilities for state variable:\n\
# open - open palm, usually five fingers\n\
# grip - fingers curled forward\n\
# paddle -  fingers together and straight\n\
# fist   \n\
string state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::hg_object_tracking::Hand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_object_tracking::Hand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.arm_centroid);
    stream.next(m.arm_eigen_value);
    stream.next(m.arm_eigen_vectors);
    stream.next(m.hand_centroid);
    stream.next(m.hand_eigen_value);
    stream.next(m.hand_eigen_vectors);
    stream.next(m.fingers);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Hand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hg_object_tracking::Hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hg_object_tracking::Hand_<ContainerAllocator> & v) 
  {
    s << indent << "arm_centroid: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_centroid);
    s << indent << "arm_eigen_value: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.arm_eigen_value);
    s << indent << "arm_eigen_vectors[]" << std::endl;
    for (size_t i = 0; i < v.arm_eigen_vectors.size(); ++i)
    {
      s << indent << "  arm_eigen_vectors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.arm_eigen_vectors[i]);
    }
    s << indent << "hand_centroid: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_centroid);
    s << indent << "hand_eigen_value: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.hand_eigen_value);
    s << indent << "hand_eigen_vectors[]" << std::endl;
    for (size_t i = 0; i < v.hand_eigen_vectors.size(); ++i)
    {
      s << indent << "  hand_eigen_vectors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.hand_eigen_vectors[i]);
    }
    s << indent << "fingers[]" << std::endl;
    for (size_t i = 0; i < v.fingers.size(); ++i)
    {
      s << indent << "  fingers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.fingers[i]);
    }
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HG_OBJECT_TRACKING_MESSAGE_HAND_H

