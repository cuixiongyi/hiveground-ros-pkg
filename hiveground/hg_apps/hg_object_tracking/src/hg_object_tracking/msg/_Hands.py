"""autogenerated by genpy from hg_object_tracking/Hands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import hg_object_tracking.msg
import std_msgs.msg

class Hands(genpy.Message):
  _md5sum = "1620114ef11440fcefdcb480209c4aae"
  _type = "hg_object_tracking/Hands"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
#if two hands are detected, if handedness is distinguished, left hand is first
Hand[] hands

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: hg_object_tracking/Hand
geometry_msgs/Transform arm_centroid
geometry_msgs/Vector3 arm_eigen_value
geometry_msgs/Vector3[] arm_eigen_vectors

geometry_msgs/Transform hand_centroid
geometry_msgs/Vector3 hand_eigen_value
geometry_msgs/Vector3[] hand_eigen_vectors
geometry_msgs/Point[] fingers

#Possibilities for state variable:
# open - open palm, usually five fingers
# grip - fingers curled forward
# paddle -  fingers together and straight
# fist   
string state

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['header','hands']
  _slot_types = ['std_msgs/Header','hg_object_tracking/Hand[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = []
    else:
      self.header = std_msgs.msg.Header()
      self.hands = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        _v1 = val1.arm_centroid
        _v2 = _v1.translation
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.rotation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.arm_eigen_value
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.arm_eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.arm_eigen_vectors:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.hand_centroid
        _v6 = _v5.translation
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = _v5.rotation
        _x = _v7
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v8 = val1.hand_eigen_value
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.hand_eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.hand_eigen_vectors:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.fingers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fingers:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = hg_object_tracking.msg.Hand()
        _v9 = val1.arm_centroid
        _v10 = _v9.translation
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v11 = _v9.rotation
        _x = _v11
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v12 = val1.arm_eigen_value
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.arm_eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.arm_eigen_vectors.append(val2)
        _v13 = val1.hand_centroid
        _v14 = _v13.translation
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v15 = _v13.rotation
        _x = _v15
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v16 = val1.hand_eigen_value
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.hand_eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.hand_eigen_vectors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fingers = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.fingers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8')
        else:
          val1.state = str[start:end]
        self.hands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        _v17 = val1.arm_centroid
        _v18 = _v17.translation
        _x = _v18
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v19 = _v17.rotation
        _x = _v19
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v20 = val1.arm_eigen_value
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.arm_eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.arm_eigen_vectors:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v21 = val1.hand_centroid
        _v22 = _v21.translation
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = _v21.rotation
        _x = _v23
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v24 = val1.hand_eigen_value
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.hand_eigen_vectors)
        buff.write(_struct_I.pack(length))
        for val2 in val1.hand_eigen_vectors:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.fingers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fingers:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = hg_object_tracking.msg.Hand()
        _v25 = val1.arm_centroid
        _v26 = _v25.translation
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v27 = _v25.rotation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v28 = val1.arm_eigen_value
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.arm_eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.arm_eigen_vectors.append(val2)
        _v29 = val1.hand_centroid
        _v30 = _v29.translation
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v31 = _v29.rotation
        _x = _v31
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v32 = val1.hand_eigen_value
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.hand_eigen_vectors = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.hand_eigen_vectors.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fingers = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.fingers.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8')
        else:
          val1.state = str[start:end]
        self.hands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
