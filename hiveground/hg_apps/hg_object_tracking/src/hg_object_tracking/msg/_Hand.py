"""autogenerated by genpy from hg_object_tracking/Hand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Hand(genpy.Message):
  _md5sum = "7e39e5f4007986ee7e6c93ad22ce65d8"
  _type = "hg_object_tracking/Hand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 arm_centroid
geometry_msgs/Vector3 arm_eigen_value
geometry_msgs/Vector3[] arm_eigen_vectors

geometry_msgs/Vector3 hand_centroid
geometry_msgs/Vector3 hand_eigen_value
geometry_msgs/Vector3[] hand_eigen_vectors
geometry_msgs/Point[] fingers

#Possibilities for state variable:
# open - open palm, usually five fingers
# grip - fingers curled forward
# paddle -  fingers together and straight
# fist   
string state

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['arm_centroid','arm_eigen_value','arm_eigen_vectors','hand_centroid','hand_eigen_value','hand_eigen_vectors','fingers','state']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3[]','geometry_msgs/Point[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       arm_centroid,arm_eigen_value,arm_eigen_vectors,hand_centroid,hand_eigen_value,hand_eigen_vectors,fingers,state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Hand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.arm_centroid is None:
        self.arm_centroid = geometry_msgs.msg.Vector3()
      if self.arm_eigen_value is None:
        self.arm_eigen_value = geometry_msgs.msg.Vector3()
      if self.arm_eigen_vectors is None:
        self.arm_eigen_vectors = []
      if self.hand_centroid is None:
        self.hand_centroid = geometry_msgs.msg.Vector3()
      if self.hand_eigen_value is None:
        self.hand_eigen_value = geometry_msgs.msg.Vector3()
      if self.hand_eigen_vectors is None:
        self.hand_eigen_vectors = []
      if self.fingers is None:
        self.fingers = []
      if self.state is None:
        self.state = ''
    else:
      self.arm_centroid = geometry_msgs.msg.Vector3()
      self.arm_eigen_value = geometry_msgs.msg.Vector3()
      self.arm_eigen_vectors = []
      self.hand_centroid = geometry_msgs.msg.Vector3()
      self.hand_eigen_value = geometry_msgs.msg.Vector3()
      self.hand_eigen_vectors = []
      self.fingers = []
      self.state = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.arm_centroid.x, _x.arm_centroid.y, _x.arm_centroid.z, _x.arm_eigen_value.x, _x.arm_eigen_value.y, _x.arm_eigen_value.z))
      length = len(self.arm_eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.arm_eigen_vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.hand_centroid.x, _x.hand_centroid.y, _x.hand_centroid.z, _x.hand_eigen_value.x, _x.hand_eigen_value.y, _x.hand_eigen_value.z))
      length = len(self.hand_eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.hand_eigen_vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fingers)
      buff.write(_struct_I.pack(length))
      for val1 in self.fingers:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.arm_centroid is None:
        self.arm_centroid = geometry_msgs.msg.Vector3()
      if self.arm_eigen_value is None:
        self.arm_eigen_value = geometry_msgs.msg.Vector3()
      if self.arm_eigen_vectors is None:
        self.arm_eigen_vectors = None
      if self.hand_centroid is None:
        self.hand_centroid = geometry_msgs.msg.Vector3()
      if self.hand_eigen_value is None:
        self.hand_eigen_value = geometry_msgs.msg.Vector3()
      if self.hand_eigen_vectors is None:
        self.hand_eigen_vectors = None
      if self.fingers is None:
        self.fingers = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.arm_centroid.x, _x.arm_centroid.y, _x.arm_centroid.z, _x.arm_eigen_value.x, _x.arm_eigen_value.y, _x.arm_eigen_value.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arm_eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.arm_eigen_vectors.append(val1)
      _x = self
      start = end
      end += 48
      (_x.hand_centroid.x, _x.hand_centroid.y, _x.hand_centroid.z, _x.hand_eigen_value.x, _x.hand_eigen_value.y, _x.hand_eigen_value.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hand_eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.hand_eigen_vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fingers = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fingers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d.pack(_x.arm_centroid.x, _x.arm_centroid.y, _x.arm_centroid.z, _x.arm_eigen_value.x, _x.arm_eigen_value.y, _x.arm_eigen_value.z))
      length = len(self.arm_eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.arm_eigen_vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_6d.pack(_x.hand_centroid.x, _x.hand_centroid.y, _x.hand_centroid.z, _x.hand_eigen_value.x, _x.hand_eigen_value.y, _x.hand_eigen_value.z))
      length = len(self.hand_eigen_vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.hand_eigen_vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.fingers)
      buff.write(_struct_I.pack(length))
      for val1 in self.fingers:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.arm_centroid is None:
        self.arm_centroid = geometry_msgs.msg.Vector3()
      if self.arm_eigen_value is None:
        self.arm_eigen_value = geometry_msgs.msg.Vector3()
      if self.arm_eigen_vectors is None:
        self.arm_eigen_vectors = None
      if self.hand_centroid is None:
        self.hand_centroid = geometry_msgs.msg.Vector3()
      if self.hand_eigen_value is None:
        self.hand_eigen_value = geometry_msgs.msg.Vector3()
      if self.hand_eigen_vectors is None:
        self.hand_eigen_vectors = None
      if self.fingers is None:
        self.fingers = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.arm_centroid.x, _x.arm_centroid.y, _x.arm_centroid.z, _x.arm_eigen_value.x, _x.arm_eigen_value.y, _x.arm_eigen_value.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.arm_eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.arm_eigen_vectors.append(val1)
      _x = self
      start = end
      end += 48
      (_x.hand_centroid.x, _x.hand_centroid.y, _x.hand_centroid.z, _x.hand_eigen_value.x, _x.hand_eigen_value.y, _x.hand_eigen_value.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hand_eigen_vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.hand_eigen_vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fingers = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.fingers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
_struct_3d = struct.Struct("<3d")
