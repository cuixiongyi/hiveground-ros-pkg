/* Auto-generated by genmsg_cpp for file /home/mahisorn/fuerte_ws/hg-ros-pkg/hiveground/hg_apps/hg_user_interaction/msg/Gestures.msg */
#ifndef HG_USER_INTERACTION_MESSAGE_GESTURES_H
#define HG_USER_INTERACTION_MESSAGE_GESTURES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "hg_user_interaction/Gesture.h"

namespace hg_user_interaction
{
template <class ContainerAllocator>
struct Gestures_ {
  typedef Gestures_<ContainerAllocator> Type;

  Gestures_()
  : header()
  , gestures()
  {
  }

  Gestures_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , gestures(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::hg_user_interaction::Gesture_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hg_user_interaction::Gesture_<ContainerAllocator> >::other >  _gestures_type;
  std::vector< ::hg_user_interaction::Gesture_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::hg_user_interaction::Gesture_<ContainerAllocator> >::other >  gestures;


  typedef boost::shared_ptr< ::hg_user_interaction::Gestures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_user_interaction::Gestures_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Gestures
typedef  ::hg_user_interaction::Gestures_<std::allocator<void> > Gestures;

typedef boost::shared_ptr< ::hg_user_interaction::Gestures> GesturesPtr;
typedef boost::shared_ptr< ::hg_user_interaction::Gestures const> GesturesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hg_user_interaction::Gestures_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hg_user_interaction::Gestures_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hg_user_interaction

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_user_interaction::Gestures_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_user_interaction::Gestures_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_user_interaction::Gestures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "acbc7e79b65b2f75cdaf2322e9e35134";
  }

  static const char* value(const  ::hg_user_interaction::Gestures_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xacbc7e79b65b2f75ULL;
  static const uint64_t static_value2 = 0xcdaf2322e9e35134ULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_user_interaction::Gestures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_user_interaction/Gestures";
  }

  static const char* value(const  ::hg_user_interaction::Gestures_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_user_interaction::Gestures_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Gesture[] gestures\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: hg_user_interaction/Gesture\n\
#gesture\n\
uint32 GESTURE_NOT_DETECTED = 0\n\
\n\
#hand\n\
uint32 GESTURE_HAND_SWEEP = 1\n\
uint32 GESTURE_HAND_PUSH_PULL = 2\n\
\n\
#elbow\n\
uint32 GESTURE_ELBOW_TOGGLE = 51\n\
\n\
#body\n\
uint32 GESTURE_BODY_MOVE = 101\n\
uint32 GESTURE_BODY_TWIST = 102\n\
uint32 GESTURE_BODY_LEAN = 103\n\
\n\
#hand(s)\n\
uint32 HAND_ONE = 1  \n\
uint32 HAND_TWO = 2\n\
\n\
#direction flags\n\
uint32 DIR_X_POS = 1\n\
uint32 DIR_X_NEG = 2\n\
uint32 DIR_Y_POS = 3\n\
uint32 DIR_Y_NEG = 4\n\
uint32 DIR_Z_POS = 5\n\
uint32 DIR_Z_NEG = 6\n\
uint32 ROT_X_POS = 7\n\
uint32 ROT_X_NEG = 8\n\
uint32 ROT_Y_POS = 9\n\
uint32 ROT_Y_NEG = 10\n\
uint32 ROT_Z_POS = 11\n\
uint32 ROT_Z_NEG = 12\n\
\n\
\n\
uint32 type\n\
uint32 hand_count\n\
uint32 direction\n\
\n\
#Only used if the type specified has some use of them \n\
float64[] vars\n\
\n\
#Only used if the type specified has some use of them\n\
geometry_msgs/Vector3[] vectors\n\
\n\
#Only used if the type specified has some use of them\n\
geometry_msgs/Transform[] transforms\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::hg_user_interaction::Gestures_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hg_user_interaction::Gestures_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hg_user_interaction::Gestures_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_user_interaction::Gestures_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.gestures);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Gestures_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hg_user_interaction::Gestures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hg_user_interaction::Gestures_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gestures[]" << std::endl;
    for (size_t i = 0; i < v.gestures.size(); ++i)
    {
      s << indent << "  gestures[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::hg_user_interaction::Gesture_<ContainerAllocator> >::stream(s, indent + "    ", v.gestures[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HG_USER_INTERACTION_MESSAGE_GESTURES_H

