/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/hiveground/hg_apps/hg_user_interaction/msg/Gesture.msg */
#ifndef HG_USER_INTERACTION_MESSAGE_GESTURE_H
#define HG_USER_INTERACTION_MESSAGE_GESTURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Transform.h"

namespace hg_user_interaction
{
template <class ContainerAllocator>
struct Gesture_ {
  typedef Gesture_<ContainerAllocator> Type;

  Gesture_()
  : type(0)
  , hand_count(0)
  , direction(0)
  , vars()
  , vectors()
  , transforms()
  {
  }

  Gesture_(const ContainerAllocator& _alloc)
  : type(0)
  , hand_count(0)
  , direction(0)
  , vars(_alloc)
  , vectors(_alloc)
  , transforms(_alloc)
  {
  }

  typedef uint32_t _type_type;
  uint32_t type;

  typedef uint32_t _hand_count_type;
  uint32_t hand_count;

  typedef uint32_t _direction_type;
  uint32_t direction;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vars_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  vars;

  typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _vectors_type;
  std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  vectors;

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transforms_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  transforms;

  enum { GESTURE_NOT_DETECTED = 0 };
  enum { GESTURE_HAND_SWEEP = 1 };
  enum { GESTURE_HAND_PUSH_PULL = 2 };
  enum { GESTURE_BODY_MOVE = 101 };
  enum { GESTURE_BODY_TWIST = 102 };
  enum { GESTURE_BODY_LEAN = 103 };
  enum { HAND_ONE = 1 };
  enum { HAND_TWO = 2 };
  enum { DIR_X_POS = 1 };
  enum { DIR_X_NEG = 2 };
  enum { DIR_Y_POS = 3 };
  enum { DIR_Y_NEG = 4 };
  enum { DIR_Z_POS = 5 };
  enum { DIR_Z_NEG = 6 };

  typedef boost::shared_ptr< ::hg_user_interaction::Gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_user_interaction::Gesture_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Gesture
typedef  ::hg_user_interaction::Gesture_<std::allocator<void> > Gesture;

typedef boost::shared_ptr< ::hg_user_interaction::Gesture> GesturePtr;
typedef boost::shared_ptr< ::hg_user_interaction::Gesture const> GestureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hg_user_interaction::Gesture_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hg_user_interaction::Gesture_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hg_user_interaction

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_user_interaction::Gesture_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_user_interaction::Gesture_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_user_interaction::Gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "355d3ec6c605417c6e0a093dc3cfb48c";
  }

  static const char* value(const  ::hg_user_interaction::Gesture_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x355d3ec6c605417cULL;
  static const uint64_t static_value2 = 0x6e0a093dc3cfb48cULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_user_interaction::Gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_user_interaction/Gesture";
  }

  static const char* value(const  ::hg_user_interaction::Gesture_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_user_interaction::Gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#gesture\n\
uint32 GESTURE_NOT_DETECTED = 0\n\
\n\
#hand\n\
uint32 GESTURE_HAND_SWEEP = 1\n\
uint32 GESTURE_HAND_PUSH_PULL = 2\n\
\n\
#body\n\
uint32 GESTURE_BODY_MOVE = 101\n\
uint32 GESTURE_BODY_TWIST = 102\n\
uint32 GESTURE_BODY_LEAN = 103\n\
\n\
#hand(s)\n\
uint32 HAND_ONE = 1  \n\
uint32 HAND_TWO = 2\n\
\n\
#direction flags\n\
uint32 DIR_X_POS = 1\n\
uint32 DIR_X_NEG = 2\n\
uint32 DIR_Y_POS = 3\n\
uint32 DIR_Y_NEG = 4\n\
uint32 DIR_Z_POS = 5\n\
uint32 DIR_Z_NEG = 6\n\
\n\
\n\
uint32 type\n\
uint32 hand_count\n\
uint32 direction\n\
\n\
#Only used if the type specified has some use of them \n\
float64[] vars\n\
\n\
#Only used if the type specified has some use of them\n\
geometry_msgs/Vector3[] vectors\n\
\n\
#Only used if the type specified has some use of them\n\
geometry_msgs/Transform transforms\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::hg_user_interaction::Gesture_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_user_interaction::Gesture_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.hand_count);
    stream.next(m.direction);
    stream.next(m.vars);
    stream.next(m.vectors);
    stream.next(m.transforms);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Gesture_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hg_user_interaction::Gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hg_user_interaction::Gesture_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
    s << indent << "hand_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.hand_count);
    s << indent << "direction: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction);
    s << indent << "vars[]" << std::endl;
    for (size_t i = 0; i < v.vars.size(); ++i)
    {
      s << indent << "  vars[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vars[i]);
    }
    s << indent << "vectors[]" << std::endl;
    for (size_t i = 0; i < v.vectors.size(); ++i)
    {
      s << indent << "  vectors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.vectors[i]);
    }
    s << indent << "transforms: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transforms);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HG_USER_INTERACTION_MESSAGE_GESTURE_H

