"""autogenerated by genpy from hg_user_interaction/Gesture.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Gesture(genpy.Message):
  _md5sum = "5fc487b8bf6f2cf9190678cc3e1d5720"
  _type = "hg_user_interaction/Gesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#gesture
uint32 GESTURE_NOT_DETECTED = 0

#hand
uint32 GESTURE_HAND_SWEEP = 1
uint32 GESTURE_HAND_PUSH_PULL = 2

#body
uint32 GESTURE_BODY_MOVE = 101
uint32 GESTURE_BODY_TWIST = 102
uint32 GESTURE_BODY_LEAN = 103

#hand(s)
uint32 HAND_ONE = 1  
uint32 HAND_TWO = 2

#direction flags
uint32 DIR_X_POS = 1
uint32 DIR_X_NEG = 2
uint32 DIR_Y_POS = 3
uint32 DIR_Y_NEG = 4
uint32 DIR_Z_POS = 5
uint32 DIR_Z_NEG = 6
uint32 ROT_X_POS = 7
uint32 ROT_X_NEG = 8
uint32 ROT_Y_POS = 9
uint32 ROT_Y_NEG = 10
uint32 ROT_Z_POS = 11
uint32 ROT_Z_NEG = 12


uint32 type
uint32 hand_count
uint32 direction

#Only used if the type specified has some use of them 
float64[] vars

#Only used if the type specified has some use of them
geometry_msgs/Vector3[] vectors

#Only used if the type specified has some use of them
geometry_msgs/Transform[] transforms



================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  GESTURE_NOT_DETECTED = 0
  GESTURE_HAND_SWEEP = 1
  GESTURE_HAND_PUSH_PULL = 2
  GESTURE_BODY_MOVE = 101
  GESTURE_BODY_TWIST = 102
  GESTURE_BODY_LEAN = 103
  HAND_ONE = 1
  HAND_TWO = 2
  DIR_X_POS = 1
  DIR_X_NEG = 2
  DIR_Y_POS = 3
  DIR_Y_NEG = 4
  DIR_Z_POS = 5
  DIR_Z_NEG = 6
  ROT_X_POS = 7
  ROT_X_NEG = 8
  ROT_Y_POS = 9
  ROT_Y_NEG = 10
  ROT_Z_POS = 11
  ROT_Z_NEG = 12

  __slots__ = ['type','hand_count','direction','vars','vectors','transforms']
  _slot_types = ['uint32','uint32','uint32','float64[]','geometry_msgs/Vector3[]','geometry_msgs/Transform[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,hand_count,direction,vars,vectors,transforms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.hand_count is None:
        self.hand_count = 0
      if self.direction is None:
        self.direction = 0
      if self.vars is None:
        self.vars = []
      if self.vectors is None:
        self.vectors = []
      if self.transforms is None:
        self.transforms = []
    else:
      self.type = 0
      self.hand_count = 0
      self.direction = 0
      self.vars = []
      self.vectors = []
      self.transforms = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.type, _x.hand_count, _x.direction))
      length = len(self.vars)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.vars))
      length = len(self.vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.vectors is None:
        self.vectors = None
      if self.transforms is None:
        self.transforms = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.hand_count, _x.direction,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.vars = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.type, _x.hand_count, _x.direction))
      length = len(self.vars)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.vars.tostring())
      length = len(self.vectors)
      buff.write(_struct_I.pack(length))
      for val1 in self.vectors:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.transforms:
        _v5 = val1.translation
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.vectors is None:
        self.vectors = None
      if self.transforms is None:
        self.transforms = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.hand_count, _x.direction,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.vars = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vectors = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.vectors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.transforms.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
