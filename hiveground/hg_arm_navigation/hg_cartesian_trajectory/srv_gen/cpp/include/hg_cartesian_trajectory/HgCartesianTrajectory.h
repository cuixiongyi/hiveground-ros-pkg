/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/hiveground/hg_arm_navigation/hg_cartesian_trajectory/srv/HgCartesianTrajectory.srv */
#ifndef HG_CARTESIAN_TRAJECTORY_SERVICE_HGCARTESIANTRAJECTORY_H
#define HG_CARTESIAN_TRAJECTORY_SERVICE_HGCARTESIANTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"



namespace hg_cartesian_trajectory
{
template <class ContainerAllocator>
struct HgCartesianTrajectoryRequest_ {
  typedef HgCartesianTrajectoryRequest_<ContainerAllocator> Type;

  HgCartesianTrajectoryRequest_()
  : header()
  , poses()
  , type(0)
  {
  }

  HgCartesianTrajectoryRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , poses(_alloc)
  , type(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  poses;

  typedef int8_t _type_type;
  int8_t type;

  enum { SIMPLE_IK = 0 };
  enum { LINE = 1 };
  enum { CIRCLE = 2 };
  enum { PATH = 3 };

  typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HgCartesianTrajectoryRequest
typedef  ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<std::allocator<void> > HgCartesianTrajectoryRequest;

typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest> HgCartesianTrajectoryRequestPtr;
typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest const> HgCartesianTrajectoryRequestConstPtr;


template <class ContainerAllocator>
struct HgCartesianTrajectoryResponse_ {
  typedef HgCartesianTrajectoryResponse_<ContainerAllocator> Type;

  HgCartesianTrajectoryResponse_()
  : success(0)
  {
  }

  HgCartesianTrajectoryResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef uint32_t _success_type;
  uint32_t success;


  typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HgCartesianTrajectoryResponse
typedef  ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<std::allocator<void> > HgCartesianTrajectoryResponse;

typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse> HgCartesianTrajectoryResponsePtr;
typedef boost::shared_ptr< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse const> HgCartesianTrajectoryResponseConstPtr;

struct HgCartesianTrajectory
{

typedef HgCartesianTrajectoryRequest Request;
typedef HgCartesianTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HgCartesianTrajectory
} // namespace hg_cartesian_trajectory

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3f1bbedc8cbe49a4199afde7d4aa071";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3f1bbedc8cbe49aULL;
  static const uint64_t static_value2 = 0x4199afde7d4aa071ULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_cartesian_trajectory/HgCartesianTrajectoryRequest";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
Header header\n\
geometry_msgs/Pose[] poses\n\
int8 type\n\
\n\
int8 SIMPLE_IK=0\n\
int8 LINE=1\n\
int8 CIRCLE=2\n\
int8 PATH=3\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "952fc3b34491dbd8ce5170ced8b373fa";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x952fc3b34491dbd8ULL;
  static const uint64_t static_value2 = 0xce5170ced8b373faULL;
};

template<class ContainerAllocator>
struct DataType< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_cartesian_trajectory/HgCartesianTrajectoryResponse";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 success\n\
\n\
";
  }

  static const char* value(const  ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.poses);
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HgCartesianTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HgCartesianTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hg_cartesian_trajectory::HgCartesianTrajectory> {
  static const char* value() 
  {
    return "a3e4d8bb4e92bdb76cb1807a6f2bc3f5";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectory&) { return value(); } 
};

template<>
struct DataType<hg_cartesian_trajectory::HgCartesianTrajectory> {
  static const char* value() 
  {
    return "hg_cartesian_trajectory/HgCartesianTrajectory";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a3e4d8bb4e92bdb76cb1807a6f2bc3f5";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_cartesian_trajectory/HgCartesianTrajectory";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a3e4d8bb4e92bdb76cb1807a6f2bc3f5";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hg_cartesian_trajectory/HgCartesianTrajectory";
  }

  static const char* value(const hg_cartesian_trajectory::HgCartesianTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HG_CARTESIAN_TRAJECTORY_SERVICE_HGCARTESIANTRAJECTORY_H

