"""autogenerated by genmsg_py from ArmAction.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import roslib.rostime

class ArmAction(roslib.message.Message):
  _md5sum = "3cbdbdb85ac6ff6f8288425d4a1dec78"
  _type = "hg_msgs/ArmAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#
# Move arm or adjust gripper
#

byte MOVE_ARM=0
byte MOVE_GRIPPER=1

byte type                   # move the arm or the gripper?

geometry_msgs/Pose goal     # goal for arm
float64 command    					# width to open gripper

duration move_time

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  MOVE_ARM = 0
  MOVE_GRIPPER = 1

  __slots__ = ['type','goal','command','move_time']
  _slot_types = ['byte','geometry_msgs/Pose','float64','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       type,goal,command,move_time
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ArmAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.command is None:
        self.command = 0.
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
    else:
      self.type = 0
      self.goal = geometry_msgs.msg.Pose()
      self.command = 0.
      self.move_time = roslib.rostime.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_b8d2i.pack(_x.type, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.command, _x.move_time.secs, _x.move_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.type, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.command, _x.move_time.secs, _x.move_time.nsecs,) = _struct_b8d2i.unpack(str[start:end])
      self.move_time.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_b8d2i.pack(_x.type, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.command, _x.move_time.secs, _x.move_time.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.goal is None:
        self.goal = geometry_msgs.msg.Pose()
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.type, _x.goal.position.x, _x.goal.position.y, _x.goal.position.z, _x.goal.orientation.x, _x.goal.orientation.y, _x.goal.orientation.z, _x.goal.orientation.w, _x.command, _x.move_time.secs, _x.move_time.nsecs,) = _struct_b8d2i.unpack(str[start:end])
      self.move_time.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_b8d2i = struct.Struct("<b8d2i")
