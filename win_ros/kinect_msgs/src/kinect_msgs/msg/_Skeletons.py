"""autogenerated by genpy from kinect_msgs/Skeletons.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import kinect_msgs.msg
import std_msgs.msg

class Skeletons(genpy.Message):
  _md5sum = "bda7ce67dd79e8cf14eda85e22cc84bb"
  _type = "kinect_msgs/Skeletons"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
Skeleton[] skeleton

int8 NUI_SKELETON_COUNT = 6

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: kinect_msgs/Skeleton
SkeletonTrackingState skeleton_tracking_state
uint64 tracking_id
uint64 enrollment_index
uint64 user_index
geometry_msgs/Transform position
geometry_msgs/Transform[] skeleton_positions
SkeletonPositionTrackingState[] skeleton_position_tracking_state
uint64 quality_flag

int8 NUI_SKELETON_POSITION_HIP_CENTER = 0
int8 NUI_SKELETON_POSITION_SPINE = 1
int8 NUI_SKELETON_POSITION_SHOULDER_CENTER = 2
int8 NUI_SKELETON_POSITION_HEAD = 3
int8 NUI_SKELETON_POSITION_SHOULDER_LEFT = 4
int8 NUI_SKELETON_POSITION_ELBOW_LEFT = 5
int8 NUI_SKELETON_POSITION_WRIST_LEFT = 6
int8 NUI_SKELETON_POSITION_HAND_LEFT = 7
int8 NUI_SKELETON_POSITION_SHOULDER_RIGHT = 8
int8 NUI_SKELETON_POSITION_ELBOW_RIGHT = 9
int8 NUI_SKELETON_POSITION_WRIST_RIGHT = 10
int8 NUI_SKELETON_POSITION_HAND_RIGHT = 11
int8 NUI_SKELETON_POSITION_HIP_LEFT = 12
int8 NUI_SKELETON_POSITION_KNEE_LEFT = 13
int8 NUI_SKELETON_POSITION_ANKLE_LEFT = 14
int8 NUI_SKELETON_POSITION_FOOT_LEFT = 15
int8 NUI_SKELETON_POSITION_HIP_RIGHT = 16
int8 NUI_SKELETON_POSITION_KNEE_RIGHT = 17
int8 NUI_SKELETON_POSITION_ANKLE_RIGHT = 18
int8 NUI_SKELETON_POSITION_FOOT_RIGHT = 19
int8 NUI_SKELETON_POSITION_COUNT = 20

================================================================================
MSG: kinect_msgs/SkeletonTrackingState
int8 NUI_SKELETON_NOT_TRACKED = 0
int8 NUI_SKELETON_POSITION_ONLY = 1
int8 NUI_SKELETON_TRACKED = 2

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: kinect_msgs/SkeletonPositionTrackingState
int8 NUI_SKELETON_POSITION_NOT_TRACKED = 0
int8 NUI_SKELETON_POSITION_INFERRED = 1
int8 NUI_SKELETON_POSITION_TRACKED = 2

"""
  # Pseudo-constants
  NUI_SKELETON_COUNT = 6

  __slots__ = ['header','skeleton']
  _slot_types = ['std_msgs/Header','kinect_msgs/Skeleton[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,skeleton

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Skeletons, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.skeleton is None:
        self.skeleton = []
    else:
      self.header = std_msgs.msg.Header()
      self.skeleton = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.skeleton)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeleton:
        _v1 = val1.skeleton_tracking_state
        pass
        _x = val1
        buff.write(_struct_3Q.pack(_x.tracking_id, _x.enrollment_index, _x.user_index))
        _v2 = val1.position
        _v3 = _v2.translation
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = _v2.rotation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.skeleton_positions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeleton_positions:
          _v5 = val2.translation
          _x = _v5
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v6 = val2.rotation
          _x = _v6
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.skeleton_position_tracking_state)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeleton_position_tracking_state:
          pass
        buff.write(_struct_Q.pack(val1.quality_flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.skeleton is None:
        self.skeleton = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeleton = []
      for i in range(0, length):
        val1 = kinect_msgs.msg.Skeleton()
        _v7 = val1.skeleton_tracking_state
        _x = val1
        start = end
        end += 24
        (_x.tracking_id, _x.enrollment_index, _x.user_index,) = _struct_3Q.unpack(str[start:end])
        _v8 = val1.position
        _v9 = _v8.translation
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v10 = _v8.rotation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeleton_positions = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v11 = val2.translation
          _x = _v11
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v12 = val2.rotation
          _x = _v12
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.skeleton_positions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeleton_position_tracking_state = []
        for i in range(0, length):
          val2 = kinect_msgs.msg.SkeletonPositionTrackingState()
          val1.skeleton_position_tracking_state.append(val2)
        start = end
        end += 8
        (val1.quality_flag,) = _struct_Q.unpack(str[start:end])
        self.skeleton.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.skeleton)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeleton:
        _v13 = val1.skeleton_tracking_state
        pass
        _x = val1
        buff.write(_struct_3Q.pack(_x.tracking_id, _x.enrollment_index, _x.user_index))
        _v14 = val1.position
        _v15 = _v14.translation
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = _v14.rotation
        _x = _v16
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.skeleton_positions)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeleton_positions:
          _v17 = val2.translation
          _x = _v17
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v18 = val2.rotation
          _x = _v18
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.skeleton_position_tracking_state)
        buff.write(_struct_I.pack(length))
        for val2 in val1.skeleton_position_tracking_state:
          pass
        buff.write(_struct_Q.pack(val1.quality_flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.skeleton is None:
        self.skeleton = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeleton = []
      for i in range(0, length):
        val1 = kinect_msgs.msg.Skeleton()
        _v19 = val1.skeleton_tracking_state
        _x = val1
        start = end
        end += 24
        (_x.tracking_id, _x.enrollment_index, _x.user_index,) = _struct_3Q.unpack(str[start:end])
        _v20 = val1.position
        _v21 = _v20.translation
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v22 = _v20.rotation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeleton_positions = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v23 = val2.translation
          _x = _v23
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v24 = val2.rotation
          _x = _v24
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.skeleton_positions.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.skeleton_position_tracking_state = []
        for i in range(0, length):
          val2 = kinect_msgs.msg.SkeletonPositionTrackingState()
          val1.skeleton_position_tracking_state.append(val2)
        start = end
        end += 8
        (val1.quality_flag,) = _struct_Q.unpack(str[start:end])
        self.skeleton.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_4d = struct.Struct("<4d")
_struct_3I = struct.Struct("<3I")
_struct_3Q = struct.Struct("<3Q")
_struct_3d = struct.Struct("<3d")
