"""autogenerated by genpy from kinect_msgs/Skeleton.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Skeleton(genpy.Message):
  _md5sum = "53f31172ad726f0663f636784717b4b9"
  _type = "kinect_msgs/Skeleton"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 skeleton_tracking_state
uint32 tracking_id
uint32 enrollment_index
uint32 user_index
geometry_msgs/Transform position
geometry_msgs/Transform[] skeleton_positions
int8[] skeleton_position_tracking_state
uint32 quality_flag

int8 SKELETON_NOT_TRACKED = 0
int8 SKELETON_POSITION_ONLY = 1
int8 SKELETON_TRACKED = 2

int8 SKELETON_POSITION_NOT_TRACKED = 0
int8 SKELETON_POSITION_INFERRED = 1
int8 SKELETON_POSITION_TRACKED = 2

int8 SKELETON_POSITION_HIP_CENTER = 0
int8 SKELETON_POSITION_SPINE = 1
int8 SKELETON_POSITION_SHOULDER_CENTER = 2
int8 SKELETON_POSITION_HEAD = 3
int8 SKELETON_POSITION_SHOULDER_LEFT = 4
int8 SKELETON_POSITION_ELBOW_LEFT = 5
int8 SKELETON_POSITION_WRIST_LEFT = 6
int8 SKELETON_POSITION_HAND_LEFT = 7
int8 SKELETON_POSITION_SHOULDER_RIGHT = 8
int8 SKELETON_POSITION_ELBOW_RIGHT = 9
int8 SKELETON_POSITION_WRIST_RIGHT = 10
int8 SKELETON_POSITION_HAND_RIGHT = 11
int8 SKELETON_POSITION_HIP_LEFT = 12
int8 SKELETON_POSITION_KNEE_LEFT = 13
int8 SKELETON_POSITION_ANKLE_LEFT = 14
int8 SKELETON_POSITION_FOOT_LEFT = 15
int8 SKELETON_POSITION_HIP_RIGHT = 16
int8 SKELETON_POSITION_KNEE_RIGHT = 17
int8 SKELETON_POSITION_ANKLE_RIGHT = 18
int8 SKELETON_POSITION_FOOT_RIGHT = 19
int8 SKELETON_POSITION_COUNT = 20

uint32 SKELETON_QUALITY_CLIPPED_RIGHT = 1
uint32 SKELETON_QUALITY_CLIPPED_LEFT = 2 
uint32 SKELETON_QUALITY_CLIPPED_TOP = 4 
uint32 SKELETON_QUALITY_CLIPPED_BOTTOM = 8  

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  SKELETON_NOT_TRACKED = 0
  SKELETON_POSITION_ONLY = 1
  SKELETON_TRACKED = 2
  SKELETON_POSITION_NOT_TRACKED = 0
  SKELETON_POSITION_INFERRED = 1
  SKELETON_POSITION_TRACKED = 2
  SKELETON_POSITION_HIP_CENTER = 0
  SKELETON_POSITION_SPINE = 1
  SKELETON_POSITION_SHOULDER_CENTER = 2
  SKELETON_POSITION_HEAD = 3
  SKELETON_POSITION_SHOULDER_LEFT = 4
  SKELETON_POSITION_ELBOW_LEFT = 5
  SKELETON_POSITION_WRIST_LEFT = 6
  SKELETON_POSITION_HAND_LEFT = 7
  SKELETON_POSITION_SHOULDER_RIGHT = 8
  SKELETON_POSITION_ELBOW_RIGHT = 9
  SKELETON_POSITION_WRIST_RIGHT = 10
  SKELETON_POSITION_HAND_RIGHT = 11
  SKELETON_POSITION_HIP_LEFT = 12
  SKELETON_POSITION_KNEE_LEFT = 13
  SKELETON_POSITION_ANKLE_LEFT = 14
  SKELETON_POSITION_FOOT_LEFT = 15
  SKELETON_POSITION_HIP_RIGHT = 16
  SKELETON_POSITION_KNEE_RIGHT = 17
  SKELETON_POSITION_ANKLE_RIGHT = 18
  SKELETON_POSITION_FOOT_RIGHT = 19
  SKELETON_POSITION_COUNT = 20
  SKELETON_QUALITY_CLIPPED_RIGHT = 1
  SKELETON_QUALITY_CLIPPED_LEFT = 2
  SKELETON_QUALITY_CLIPPED_TOP = 4
  SKELETON_QUALITY_CLIPPED_BOTTOM = 8

  __slots__ = ['skeleton_tracking_state','tracking_id','enrollment_index','user_index','position','skeleton_positions','skeleton_position_tracking_state','quality_flag']
  _slot_types = ['int8','uint32','uint32','uint32','geometry_msgs/Transform','geometry_msgs/Transform[]','int8[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       skeleton_tracking_state,tracking_id,enrollment_index,user_index,position,skeleton_positions,skeleton_position_tracking_state,quality_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Skeleton, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.skeleton_tracking_state is None:
        self.skeleton_tracking_state = 0
      if self.tracking_id is None:
        self.tracking_id = 0
      if self.enrollment_index is None:
        self.enrollment_index = 0
      if self.user_index is None:
        self.user_index = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Transform()
      if self.skeleton_positions is None:
        self.skeleton_positions = []
      if self.skeleton_position_tracking_state is None:
        self.skeleton_position_tracking_state = []
      if self.quality_flag is None:
        self.quality_flag = 0
    else:
      self.skeleton_tracking_state = 0
      self.tracking_id = 0
      self.enrollment_index = 0
      self.user_index = 0
      self.position = geometry_msgs.msg.Transform()
      self.skeleton_positions = []
      self.skeleton_position_tracking_state = []
      self.quality_flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b3I7d.pack(_x.skeleton_tracking_state, _x.tracking_id, _x.enrollment_index, _x.user_index, _x.position.translation.x, _x.position.translation.y, _x.position.translation.z, _x.position.rotation.x, _x.position.rotation.y, _x.position.rotation.z, _x.position.rotation.w))
      length = len(self.skeleton_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeleton_positions:
        _v1 = val1.translation
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.skeleton_position_tracking_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.skeleton_position_tracking_state))
      buff.write(_struct_I.pack(self.quality_flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Transform()
      if self.skeleton_positions is None:
        self.skeleton_positions = None
      end = 0
      _x = self
      start = end
      end += 69
      (_x.skeleton_tracking_state, _x.tracking_id, _x.enrollment_index, _x.user_index, _x.position.translation.x, _x.position.translation.y, _x.position.translation.z, _x.position.rotation.x, _x.position.rotation.y, _x.position.rotation.z, _x.position.rotation.w,) = _struct_b3I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeleton_positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.skeleton_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.skeleton_position_tracking_state = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.quality_flag,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b3I7d.pack(_x.skeleton_tracking_state, _x.tracking_id, _x.enrollment_index, _x.user_index, _x.position.translation.x, _x.position.translation.y, _x.position.translation.z, _x.position.rotation.x, _x.position.rotation.y, _x.position.rotation.z, _x.position.rotation.w))
      length = len(self.skeleton_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeleton_positions:
        _v5 = val1.translation
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.skeleton_position_tracking_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.skeleton_position_tracking_state.tostring())
      buff.write(_struct_I.pack(self.quality_flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Transform()
      if self.skeleton_positions is None:
        self.skeleton_positions = None
      end = 0
      _x = self
      start = end
      end += 69
      (_x.skeleton_tracking_state, _x.tracking_id, _x.enrollment_index, _x.user_index, _x.position.translation.x, _x.position.translation.y, _x.position.translation.z, _x.position.rotation.x, _x.position.rotation.y, _x.position.rotation.z, _x.position.rotation.w,) = _struct_b3I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeleton_positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.skeleton_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.skeleton_position_tracking_state = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (self.quality_flag,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_b3I7d = struct.Struct("<b3I7d")
_struct_3d = struct.Struct("<3d")
