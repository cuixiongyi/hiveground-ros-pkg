/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/win_ros/kinect_msgs/msg/Skeleton.msg */
#ifndef KINECT_MSGS_MESSAGE_SKELETON_H
#define KINECT_MSGS_MESSAGE_SKELETON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Transform.h"
#include "geometry_msgs/Transform.h"

namespace kinect_msgs
{
template <class ContainerAllocator>
struct Skeleton_ {
  typedef Skeleton_<ContainerAllocator> Type;

  Skeleton_()
  : skeleton_tracking_state(0)
  , tracking_id(0)
  , enrollment_index(0)
  , user_index(0)
  , position()
  , skeleton_positions()
  , skeleton_position_tracking_state()
  , quality_flag(0)
  {
  }

  Skeleton_(const ContainerAllocator& _alloc)
  : skeleton_tracking_state(0)
  , tracking_id(0)
  , enrollment_index(0)
  , user_index(0)
  , position(_alloc)
  , skeleton_positions(_alloc)
  , skeleton_position_tracking_state(_alloc)
  , quality_flag(0)
  {
  }

  typedef int8_t _skeleton_tracking_state_type;
  int8_t skeleton_tracking_state;

  typedef uint32_t _tracking_id_type;
  uint32_t tracking_id;

  typedef uint32_t _enrollment_index_type;
  uint32_t enrollment_index;

  typedef uint32_t _user_index_type;
  uint32_t user_index;

  typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Transform_<ContainerAllocator>  position;

  typedef std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  _skeleton_positions_type;
  std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  skeleton_positions;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _skeleton_position_tracking_state_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  skeleton_position_tracking_state;

  typedef uint32_t _quality_flag_type;
  uint32_t quality_flag;

  enum { SKELETON_NOT_TRACKED = 0 };
  enum { SKELETON_POSITION_ONLY = 1 };
  enum { SKELETON_TRACKED = 2 };
  enum { SKELETON_POSITION_NOT_TRACKED = 0 };
  enum { SKELETON_POSITION_INFERRED = 1 };
  enum { SKELETON_POSITION_TRACKED = 2 };
  enum { SKELETON_POSITION_HIP_CENTER = 0 };
  enum { SKELETON_POSITION_SPINE = 1 };
  enum { SKELETON_POSITION_SHOULDER_CENTER = 2 };
  enum { SKELETON_POSITION_HEAD = 3 };
  enum { SKELETON_POSITION_SHOULDER_LEFT = 4 };
  enum { SKELETON_POSITION_ELBOW_LEFT = 5 };
  enum { SKELETON_POSITION_WRIST_LEFT = 6 };
  enum { SKELETON_POSITION_HAND_LEFT = 7 };
  enum { SKELETON_POSITION_SHOULDER_RIGHT = 8 };
  enum { SKELETON_POSITION_ELBOW_RIGHT = 9 };
  enum { SKELETON_POSITION_WRIST_RIGHT = 10 };
  enum { SKELETON_POSITION_HAND_RIGHT = 11 };
  enum { SKELETON_POSITION_HIP_LEFT = 12 };
  enum { SKELETON_POSITION_KNEE_LEFT = 13 };
  enum { SKELETON_POSITION_ANKLE_LEFT = 14 };
  enum { SKELETON_POSITION_FOOT_LEFT = 15 };
  enum { SKELETON_POSITION_HIP_RIGHT = 16 };
  enum { SKELETON_POSITION_KNEE_RIGHT = 17 };
  enum { SKELETON_POSITION_ANKLE_RIGHT = 18 };
  enum { SKELETON_POSITION_FOOT_RIGHT = 19 };
  enum { SKELETON_POSITION_COUNT = 20 };
  enum { SKELETON_QUALITY_CLIPPED_RIGHT = 1 };
  enum { SKELETON_QUALITY_CLIPPED_LEFT = 2 };
  enum { SKELETON_QUALITY_CLIPPED_TOP = 4 };
  enum { SKELETON_QUALITY_CLIPPED_BOTTOM = 8 };

  typedef boost::shared_ptr< ::kinect_msgs::Skeleton_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_msgs::Skeleton_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Skeleton
typedef  ::kinect_msgs::Skeleton_<std::allocator<void> > Skeleton;

typedef boost::shared_ptr< ::kinect_msgs::Skeleton> SkeletonPtr;
typedef boost::shared_ptr< ::kinect_msgs::Skeleton const> SkeletonConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinect_msgs::Skeleton_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinect_msgs::Skeleton_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinect_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_msgs::Skeleton_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_msgs::Skeleton_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "53f31172ad726f0663f636784717b4b9";
  }

  static const char* value(const  ::kinect_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x53f31172ad726f06ULL;
  static const uint64_t static_value2 = 0x63f636784717b4b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_msgs/Skeleton";
  }

  static const char* value(const  ::kinect_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_msgs::Skeleton_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 skeleton_tracking_state\n\
uint32 tracking_id\n\
uint32 enrollment_index\n\
uint32 user_index\n\
geometry_msgs/Transform position\n\
geometry_msgs/Transform[] skeleton_positions\n\
int8[] skeleton_position_tracking_state\n\
uint32 quality_flag\n\
\n\
int8 SKELETON_NOT_TRACKED = 0\n\
int8 SKELETON_POSITION_ONLY = 1\n\
int8 SKELETON_TRACKED = 2\n\
\n\
int8 SKELETON_POSITION_NOT_TRACKED = 0\n\
int8 SKELETON_POSITION_INFERRED = 1\n\
int8 SKELETON_POSITION_TRACKED = 2\n\
\n\
int8 SKELETON_POSITION_HIP_CENTER = 0\n\
int8 SKELETON_POSITION_SPINE = 1\n\
int8 SKELETON_POSITION_SHOULDER_CENTER = 2\n\
int8 SKELETON_POSITION_HEAD = 3\n\
int8 SKELETON_POSITION_SHOULDER_LEFT = 4\n\
int8 SKELETON_POSITION_ELBOW_LEFT = 5\n\
int8 SKELETON_POSITION_WRIST_LEFT = 6\n\
int8 SKELETON_POSITION_HAND_LEFT = 7\n\
int8 SKELETON_POSITION_SHOULDER_RIGHT = 8\n\
int8 SKELETON_POSITION_ELBOW_RIGHT = 9\n\
int8 SKELETON_POSITION_WRIST_RIGHT = 10\n\
int8 SKELETON_POSITION_HAND_RIGHT = 11\n\
int8 SKELETON_POSITION_HIP_LEFT = 12\n\
int8 SKELETON_POSITION_KNEE_LEFT = 13\n\
int8 SKELETON_POSITION_ANKLE_LEFT = 14\n\
int8 SKELETON_POSITION_FOOT_LEFT = 15\n\
int8 SKELETON_POSITION_HIP_RIGHT = 16\n\
int8 SKELETON_POSITION_KNEE_RIGHT = 17\n\
int8 SKELETON_POSITION_ANKLE_RIGHT = 18\n\
int8 SKELETON_POSITION_FOOT_RIGHT = 19\n\
int8 SKELETON_POSITION_COUNT = 20\n\
\n\
uint32 SKELETON_QUALITY_CLIPPED_RIGHT = 1\n\
uint32 SKELETON_QUALITY_CLIPPED_LEFT = 2 \n\
uint32 SKELETON_QUALITY_CLIPPED_TOP = 4 \n\
uint32 SKELETON_QUALITY_CLIPPED_BOTTOM = 8  \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::kinect_msgs::Skeleton_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.skeleton_tracking_state);
    stream.next(m.tracking_id);
    stream.next(m.enrollment_index);
    stream.next(m.user_index);
    stream.next(m.position);
    stream.next(m.skeleton_positions);
    stream.next(m.skeleton_position_tracking_state);
    stream.next(m.quality_flag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Skeleton_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_msgs::Skeleton_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinect_msgs::Skeleton_<ContainerAllocator> & v) 
  {
    s << indent << "skeleton_tracking_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.skeleton_tracking_state);
    s << indent << "tracking_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tracking_id);
    s << indent << "enrollment_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enrollment_index);
    s << indent << "user_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.user_index);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "skeleton_positions[]" << std::endl;
    for (size_t i = 0; i < v.skeleton_positions.size(); ++i)
    {
      s << indent << "  skeleton_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.skeleton_positions[i]);
    }
    s << indent << "skeleton_position_tracking_state[]" << std::endl;
    for (size_t i = 0; i < v.skeleton_position_tracking_state.size(); ++i)
    {
      s << indent << "  skeleton_position_tracking_state[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.skeleton_position_tracking_state[i]);
    }
    s << indent << "quality_flag: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.quality_flag);
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINECT_MSGS_MESSAGE_SKELETON_H

