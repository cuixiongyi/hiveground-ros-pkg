/* Auto-generated by genmsg_cpp for file /home/mahisorn/ros_workspace/hg-ros-pkg/win_ros/kinect_msgs/msg/SkeletonPositionTrackingState.msg */
#ifndef KINECT_MSGS_MESSAGE_SKELETONPOSITIONTRACKINGSTATE_H
#define KINECT_MSGS_MESSAGE_SKELETONPOSITIONTRACKINGSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace kinect_msgs
{
template <class ContainerAllocator>
struct SkeletonPositionTrackingState_ {
  typedef SkeletonPositionTrackingState_<ContainerAllocator> Type;

  SkeletonPositionTrackingState_()
  {
  }

  SkeletonPositionTrackingState_(const ContainerAllocator& _alloc)
  {
  }

  enum { NUI_SKELETON_POSITION_NOT_TRACKED = 0 };
  enum { NUI_SKELETON_POSITION_INFERRED = 1 };
  enum { NUI_SKELETON_POSITION_TRACKED = 2 };

  typedef boost::shared_ptr< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SkeletonPositionTrackingState
typedef  ::kinect_msgs::SkeletonPositionTrackingState_<std::allocator<void> > SkeletonPositionTrackingState;

typedef boost::shared_ptr< ::kinect_msgs::SkeletonPositionTrackingState> SkeletonPositionTrackingStatePtr;
typedef boost::shared_ptr< ::kinect_msgs::SkeletonPositionTrackingState const> SkeletonPositionTrackingStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinect_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8e5b6512cb1c58f34c3877dc4c11e2fb";
  }

  static const char* value(const  ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8e5b6512cb1c58f3ULL;
  static const uint64_t static_value2 = 0x4c3877dc4c11e2fbULL;
};

template<class ContainerAllocator>
struct DataType< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinect_msgs/SkeletonPositionTrackingState";
  }

  static const char* value(const  ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 NUI_SKELETON_POSITION_NOT_TRACKED = 0\n\
int8 NUI_SKELETON_POSITION_INFERRED = 1\n\
int8 NUI_SKELETON_POSITION_TRACKED = 2\n\
\n\
";
  }

  static const char* value(const  ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SkeletonPositionTrackingState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinect_msgs::SkeletonPositionTrackingState_<ContainerAllocator> & v) 
  {
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINECT_MSGS_MESSAGE_SKELETONPOSITIONTRACKINGSTATE_H

